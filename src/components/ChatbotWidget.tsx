import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { 
  MessageCircle, 
  Send, 
  X, 
  Bot, 
  User, 
  Mic, 
  MicOff, 
  Volume2,
  MapPin,
  Clock,
  Star
} from "lucide-react";

interface Message {
  id: number;
  type: "user" | "assistant";
  content: string;
  timestamp: string;
  suggestions?: string[];
}

const ChatbotWidget = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      type: "assistant",
      content: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ YalaBot ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üåü\n\n‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏¢‡∏∞‡∏•‡∏≤\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å\n‚Ä¢ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
      timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }),
      suggestions: ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß 1 ‡∏ß‡∏±‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°"]
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (!isOpen && messages.length > 1) {
      setUnreadCount(messages.filter(m => m.type === "assistant").length - 1);
    } else {
      setUnreadCount(0);
    }
  }, [isOpen, messages]);

  const mockResponses = {
    places: [
      "‡∏ó‡∏µ‡πà‡∏¢‡∏∞‡∏•‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏∞:\n\nüïå **‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏¢‡∏∞‡∏•‡∏≤** - ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡πÉ‡∏à\nüåä **‡∏´‡∏≤‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏ï‡πâ** - ‡∏ä‡∏≤‡∏¢‡∏´‡∏≤‡∏î‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô\nüå≤ **‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥** - ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞?",
      "‡∏¢‡∏∞‡∏•‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞:\n\nüèõÔ∏è **‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏¢‡∏∞‡∏•‡∏≤** - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô\nüé≠ **‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°** - ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏è‡∏®‡∏¥‡∏•‡∏õ‡πå\nüïå **‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà** - ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤\n\n‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∞?"
    ],
    food: [
      "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏¢‡∏∞‡∏•‡∏≤‡∏Ñ‡πà‡∏∞:\n\nüçú **‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏Å‡∏±‡∏ô** - ‡∏Ç‡πâ‡∏≤‡∏ß‡∏¢‡∏≥‡πÉ‡∏ï‡πâ‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 4.8/5\nü•ò **‡∏Ñ‡∏£‡∏±‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ï‡πâ** - ‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏õ‡∏•‡∏≤‡∏ä‡πà‡∏≠‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏î‡πá‡∏î\nüçõ **‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏≠‡∏¥‡πà‡∏°‡∏ó‡πâ‡∏≠‡∏á** - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
      "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏¢‡∏∞‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏≠‡∏á‡∏Ñ‡πà‡∏∞:\n\nüå∂Ô∏è **‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏õ‡∏•‡∏≤‡∏ä‡πà‡∏≠‡∏ô** - ‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏ú‡πá‡∏î ‡∏ã‡∏î‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢\nü•ó **‡∏¢‡∏≥‡πÉ‡∏ï‡πâ** - ‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤‡∏ú‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏ú‡∏±‡∏Å‡∏™‡∏î\nüç§ **‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡πÉ‡∏ï‡πâ** - ‡∏°‡∏µ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡∏¥‡πà‡∏ô\n\n‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
    ],
    planning: [
      "‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡∏∞‡∏•‡∏≤ 1 ‡∏ß‡∏±‡∏ô‡∏Ñ‡πà‡∏∞:\n\nüåÖ **‡πÄ‡∏ä‡πâ‡∏≤ (8:00-11:00)**\n‚Ä¢ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏¢‡∏∞‡∏•‡∏≤\n‚Ä¢ ‡∏î‡∏∑‡πà‡∏°‡∏Å‡∏≤‡πÅ‡∏ü‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏±‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á\n\n‚òÄÔ∏è **‡∏™‡∏≤‡∏¢ (11:00-14:00)**\n‚Ä¢ ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏¢‡∏∞‡∏•‡∏≤\n‚Ä¢ ‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏Å‡∏±‡∏ô\n\nüåÜ **‡∏ö‡πà‡∏≤‡∏¢ (14:00-17:00)**\n‚Ä¢ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô\n‚Ä¢ ‡∏ä‡∏¥‡∏°‡∏Ç‡∏ô‡∏°‡πÑ‡∏ó‡∏¢‡πÇ‡∏ö‡∏£‡∏≤‡∏ì\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
      "‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡∏∞‡∏•‡∏≤ 2 ‡∏ß‡∏±‡∏ô 1 ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏∞:\n\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1**\nüåÑ ‡πÄ‡∏ä‡πâ‡∏≤: ‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡∏Å‡∏•‡∏≤‡∏á + ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°\nüçΩÔ∏è ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á: ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ï‡πâ\nüåÖ ‡∏ö‡πà‡∏≤‡∏¢: ‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô + ‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏¢‡∏∞‡∏•‡∏≤\n\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2**\nüåä ‡πÄ‡∏ä‡πâ‡∏≤: ‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥\nüçú ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á: ‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏≠‡∏¥‡πà‡∏°‡∏ó‡πâ‡∏≠‡∏á\nüèõÔ∏è ‡∏ö‡πà‡∏≤‡∏¢: ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå + ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
    ],
    culture: [
      "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏¢‡∏∞‡∏•‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏∞:\n\nüé≠ **‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á**\n‚Ä¢ ‡∏•‡∏¥‡πÄ‡∏Å‡πÉ‡∏ï‡πâ - ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô\n‚Ä¢ ‡∏£‡∏≥‡∏ß‡∏á‡πÉ‡∏ï‡πâ - ‡∏Å‡∏≤‡∏£‡∏£‡∏≥‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°\n\nüèõÔ∏è **‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°**\n‚Ä¢ ‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤\n‚Ä¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°\n\nüçú **‡∏≠‡∏≤‡∏´‡∏≤‡∏£**\n‚Ä¢ ‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô ‡πÄ‡∏ú‡πá‡∏î‡∏£‡πâ‡∏≠‡∏ô\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô\n\n‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∞?",
      "‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏¢‡∏∞‡∏•‡∏≤‡∏Ñ‡πà‡∏∞:\n\nüåô **‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ô‡∏≤**\n‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏≠ - ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏™‡∏•‡∏¥‡∏°\n‚Ä¢ ‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á - ‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡πÑ‡∏ó‡∏¢‡∏û‡∏∏‡∏ó‡∏ò\n\nüéä **‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ**\n‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏¢‡∏∞‡∏•‡∏≤ - ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå\n‚Ä¢ ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ï‡πâ - ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
    ]
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      type: "user",
      content: inputMessage,
      timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Simulate AI response based on keywords
    setTimeout(() => {
      let response = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Ñ‡πà‡∏∞";
      let suggestions: string[] = [];

      const input = inputMessage.toLowerCase();
      
      if (input.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà') || input.includes('‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß') || input.includes('‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß')) {
        response = mockResponses.places[Math.floor(Math.random() * mockResponses.places.length)];
        suggestions = ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î"];
      } else if (input.includes('‡∏≠‡∏≤‡∏´‡∏≤‡∏£') || input.includes('‡∏£‡πâ‡∏≤‡∏ô') || input.includes('‡∏Å‡∏¥‡∏ô')) {
        response = mockResponses.food[Math.floor(Math.random() * mockResponses.food.length)];
        suggestions = ["‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π", "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"];
      } else if (input.includes('‡πÅ‡∏ú‡∏ô') || input.includes('‡∏ß‡∏≤‡∏á') || input.includes('1 ‡∏ß‡∏±‡∏ô') || input.includes('2 ‡∏ß‡∏±‡∏ô')) {
        response = mockResponses.planning[Math.floor(Math.random() * mockResponses.planning.length)];
        suggestions = ["‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"];
      } else if (input.includes('‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°') || input.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ') || input.includes('‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•')) {
        response = mockResponses.culture[Math.floor(Math.random() * mockResponses.culture.length)];
        suggestions = ["‡∏î‡∏π‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢"];
      }

      const assistantMessage: Message = {
        id: messages.length + 2,
        type: "assistant",
        content: response,
        timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }),
        suggestions
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  const toggleVoiceInput = () => {
    setIsListening(!isListening);
    if (!isListening) {
      // Start voice recognition
      setTimeout(() => {
        setInputMessage("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞");
        setIsListening(false);
      }, 2000);
    }
  };

  const speakMessage = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'th-TH';
      speechSynthesis.speak(utterance);
    }
  };

  return (
    <>
      {/* Floating Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        {!isOpen && (
          <Button
            onClick={() => setIsOpen(true)}
            size="lg"
            className="rounded-full h-14 w-14 shadow-glow hover:shadow-hover bg-primary hover:bg-primary-glow relative"
          >
            <MessageCircle className="h-6 w-6" />
            {unreadCount > 0 && (
              <Badge variant="destructive" className="absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 flex items-center justify-center text-xs">
                {unreadCount}
              </Badge>
            )}
          </Button>
        )}
      </div>

      {/* Chat Widget */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 z-50 w-96 h-[600px] max-w-[calc(100vw-2rem)] max-h-[calc(100vh-2rem)]">
          <Card className="h-full flex flex-col shadow-2xl border border-border/50 backdrop-blur-sm bg-card/95">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4 bg-gradient-to-r from-primary to-secondary text-primary-foreground rounded-t-lg">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                  <Bot className="h-4 w-4" />
                </div>
                <div>
                  <CardTitle className="text-sm font-medium">YalaBot</CardTitle>
                  <p className="text-xs text-white/80">‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡∏∞‡∏•‡∏≤</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsOpen(false)}
                  className="text-white hover:bg-white/20 h-8 w-8 p-0"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            
            <CardContent className="flex-1 flex flex-col p-0">
              {/* Messages */}
              <ScrollArea className="flex-1 px-4 py-2">
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div key={message.id} className={`flex gap-3 ${message.type === "user" ? "flex-row-reverse" : ""}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        message.type === "user" 
                          ? "bg-primary text-primary-foreground" 
                          : "bg-gradient-to-br from-primary to-secondary text-white"
                      }`}>
                        {message.type === "user" ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                      </div>
                      
                      <div className={`flex-1 ${message.type === "user" ? "text-right" : ""}`}>
                        <div className={`inline-block p-3 rounded-lg max-w-[85%] ${
                          message.type === "user"
                            ? "bg-primary text-primary-foreground ml-auto"
                            : "bg-muted"
                        }`}>
                          <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                          {message.type === "assistant" && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => speakMessage(message.content)}
                              className="mt-2 h-6 px-2 text-xs hover:bg-background/20"
                            >
                              <Volume2 className="h-3 w-3 mr-1" />
                              ‡∏ü‡∏±‡∏á
                            </Button>
                          )}
                        </div>
                        <div className="text-xs text-muted-foreground mt-1">
                          {message.timestamp}
                        </div>
                        
                        {/* Suggestions */}
                        {message.suggestions && message.suggestions.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-2">
                            {message.suggestions.map((suggestion, index) => (
                              <Button
                                key={index}
                                variant="outline"
                                size="sm"
                                onClick={() => handleSuggestionClick(suggestion)}
                                className="h-7 px-3 text-xs"
                              >
                                {suggestion}
                              </Button>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  
                  {isTyping && (
                    <div className="flex gap-3">
                      <div className="w-8 h-8 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center">
                        <Bot className="h-4 w-4 text-white" />
                      </div>
                      <div className="bg-muted p-3 rounded-lg">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              </ScrollArea>

              {/* Input */}
              <div className="border-t p-4">
                <div className="flex gap-2">
                  <Input
                    ref={inputRef}
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á..."
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    className="flex-1"
                  />
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={toggleVoiceInput}
                    className={`${isListening ? "bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-300" : ""}`}
                  >
                    {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </Button>
                  <Button onClick={handleSendMessage} disabled={!inputMessage.trim()}>
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
                <div className="text-xs text-muted-foreground mt-2">
                  üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°: "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢"
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
};

export default ChatbotWidget;